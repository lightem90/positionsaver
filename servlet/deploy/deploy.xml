<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--================================================================-->
<!--	Procedura automatica di deploy di tutti i progetti. 		-->
<!--																-->
<!--  For the purpose of easier reading the script					-->
<!--        is divided into following sections:						-->
<!--        - initialization										-->
<!--        - compilation											-->
<!--        - dist													-->
<!--        - execution												-->
<!--        - debugging												-->
<!--        - javadoc												-->
<!--        - junit compilation										-->
<!--        - junit execution										-->
<!--        - junit debugging										-->
<!--        - cleanup												-->
<!--																-->
<!-- 																-->
<!--	1) cancella la cartella (opzionale)							-->
<!--	2) prende l'ultima versione da svn							-->
<!--	3) Invia una mail di notifica dopo il checkuot				-->
<!--	4) compila tutti i file deploy.xml							-->
<!--	versione 1.9 31/03/10										-->
<!--																-->
<!--================================================================-->

<project name="tsp" default="deploy" basedir=".">
	<!--================================================================-->
	<!--   parametri ereditati dalla mdeploy   							-->
	<echo message="suffix :${suffix}:" />
	<echo message="paramlib :${paramlib}:" />
	<echo message="tomcat url  :${tomcat.url}:" />
	<echo message="dipendenze :${dipendenze}:" />
	<!--================================================================-->

	<!--================================================================-->
	<!--   proprietà						   							-->

	<property name="suffix" value="" />
	<!-- Andrea 09/11/12
		tiolgo il default della param lib
		ci mette tropo tempo a compilare 
		pwerchè cera i ntutti i jar
	-->
	
	<!--<property name="paramlib" value="" />-->
	<property name="deploydir" value="deploy" />
	<property name="dipendenze" value="deploy.jar" />
	<property name="lib.home" value="/archivio/deploy/lib" />
	<property name="tomcat.home" value="/usr/local/tomcat/lib" />
	<property name="web.folder" value="." />
	<property name="lib.folder" value="" />
	<property name="javasource" value="." />
	<property name="javasourcetest" value="." />
	<property name="junit.output.dir" value="junit" />
	<property name="gwt.args" value="" />
	<property name="redmine.driver" value="com.mysql.jdbc.Driver" />

	<!-- <property name="redmine.url" value="jdbc:mysql://192.168.1.114/redmine_default" /> -->
	<!-- appena BANO sistema l'accesso del server in rete, si potrà sostituire l'ip con il dns 'server06' -->
	<property name="redmine.url" value="jdbc:mysql://server06:3306/redmine_default" />

	<property name="redmine.id" value="redmine" />
	<property name="redmine.pw" value="IIHka80LalQQ" />


	<!--================================================================-->
	<import file="${tomcat.home}/../bin/catalina-tasks.xml" />

	<mkdir dir="lib" />

	<!--================================================================-->
	<!--   definizione di task				   							-->
	<!--
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpath="${lib.home}/catalina-ant.jar" />

	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpath="${lib.home}/catalina-ant.jar" />
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask" classpath="${lib.home}/catalina-ant.jar" />
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpath="${lib.home}/catalina-ant.jar" />
	<taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask" classpath="${lib.home}/catalina-ant.jar" />
	<taskdef name="roles" classname="org.apache.catalina.ant.RolesTask" classpath="${lib.home}/catalina-ant.jar" />
	<taskdef name="start" classname="org.apache.catalina.ant.StartTask" classpath="${lib.home}/catalina-ant.jar" />
	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask" classpath="${lib.home}/catalina-ant.jar" />
	-->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.home}/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>
	<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask">
		<classpath>
			<pathelement location="${lib.home}/dbunit-2.4.7.jar" />
			<pathelement location="${lib.home}/slf4j-api-1.5.8.jar" />
			<pathelement location="${lib.home}/slf4j-log4j12-1.5.0.jar" />
			<pathelement location="${lib.home}/log4j-1.2.14.jar" />
		</classpath>
	</taskdef>
	<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpath="${lib.home}/compiler.jar" />

	<!--================================================================-->

	<!--================================================================-->
	<!--   definizione dei path				   							-->
	<path id="latest.classpath">
		<path refid="lib.path.ref" />
		<path refid="JUnit 4.libraryclasspath" />
		<path refid="gwt" />
		<path refid="Apache Tomcat v6.0 [Apache Tomcat v6.0].libraryclasspath" />
		<path refid="Hibernate" />
		<path refid="webtest" />
		<path refid="selenium" />
		<fileset dir="lib" includes="*.jar" />
		<fileset dir="${web.folder}/${lib.folder}" includes="*.jar" />
		<pathelement location="bin" />
	</path>
	<path id="lib.path.ref">
		<fileset id="lib.path.ref.fileset" dir="${lib.home}" includes="${dipendenze} ${paramlib}" excludes="**/doc/**" />
		<fileset id="common.lib.path.ref.fileset" dir="${lib.home}" includes="${common.lib}" excludes="**/doc/**" />
	</path>

	<path id="lib.path.ref.param">
		<fileset id="lib.file.ref.param" dir="${lib.home}" includes="${paramlib}" excludes="**/doc/**" />

	</path>


	<!--<path id="toolslib">
		<path location="lib/hibernate-tools.jar" />
		<path location="lib/hibernate3.jar" />
		<path location="lib/freemarker.jar" />
		<path location="${jdbc.driver.jar}" />
	</path>-->
	<!-- i jar di junit sono già nell cartella lib-->
	<path id="JUnit 4.libraryclasspath">
		<fileset dir="${lib.home}" includes="junit*.*,*hamcrest*, ${debug.lib}" />
	</path>
	<path id="selenium">
		<fileset dir="${lib.home}" includes="selenium*" />
	</path>
	<!-- i jar di junit sono già nell cartella lib-->
	<path id="Apache Tomcat v6.0 [Apache Tomcat v6.0].libraryclasspath">
		<fileset dir="${tomcat.home}" includes="**/*.jar" />
	</path>
	<path id="Hibernate">
		<fileset dir="${lib.home}/hibernate" includes="**/*.jar" />
	</path>
	<path id="Hibernaterev">
		<fileset dir="${lib.home}/hibernate/tools" includes="**/*.jar" />
	</path>
	<path id="gwt">
		<fileset dir="${lib.home}/gwt" includes="**/*.jar" />
	</path>
	<path id="webtest">
		<fileset dir="${lib.home}/jwebunit" includes="**/*.jar" />
	</path>
	<!--================================================================-->


	<property name="deploy.classpath" refid="latest.classpath" />
	<!--================================================================-->
	<!--   inizializzazione					   							-->
	<target name="init">
		<mkdir dir="bin" />
		<mkdir dir="lib" />
		<mkdir dir="${junit.output.dir}" />

		<copy includeemptydirs="false" todir="bin">
			<fileset dir="${javasource}">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="${javasourcetest}">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
				<exclude name="**/*.properties" />
			</fileset>
			<fileset dir="${javasource}">
				<include name="**/client/**/*.java" if="gwtproject" />
			</fileset>

		</copy>
		<if>

			<isset property="javascriptfiles" />

			<then>
				<property name="excludejs" value="**/*.js" />
			</then>
			<else>
				<property name="excludejs" value="" />
			</else>
		</if>
		<echo message="propietà ${excludejs}">
		</echo>
		<copy includeemptydirs="false" todir="dist/${web.folder}">
			<fileset dir="${web.folder}">
				<include name="**/*.*" />
				<exclude name="${excludejs}" />
				<exclude name="**/deploy/**/*.*" />
				<exclude name="**/bin/**/*.*" />
				<exclude name="**/depcache/**/*.*" />
				<exclude name="**/doc/**/*.*" />
				<exclude name="**/dist/**/*.*" />
				<exclude name="**/deploy.properties" />
				<!--================================================================-->
				<!-- Andrea 09/05/12           		-->
				<!-- Non copio di jar che devono essere descritti esplicitamente 		-->

				<exclude name="**/*.jar" />


			</fileset>
		</copy>
		<antcall target="mergelistjsp" />
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!-- This target will automatically create an html file with 		-->
	<!-- an incremented build number and version number           		-->
	<target name="versionInfo" if="version">
		<propertyfile file="version.properties" comment="Build version info">
			<entry key="buildDate" type="date" value="now" pattern="dd.MM.yyyy HH:mm" />
			<entry key="buildNum" default="0" type="int" operation="+" value="1" pattern="0000" />
			<entry key="buildVer" default="0" type="int" value="1" pattern="0000" />
			<entry key="buildRel" default="beta" type="string" value="beta" />
			<entry key="JarFile" value="${jar.file}" />
		</propertyfile>
		<copy file="${web.folder}/inc/page_footer.inc" tofile="dist/${web.folder}/inc/page_footer.inc" overwrite="true" />
		<replace file="dist/${web.folder}/inc/page_footer.inc" value="value not found in version.properties" propertyFile="version.properties">
			<replacefilter token="@buildDate@" property="buildDate" />
			<replacefilter token="@buildNum@" property="buildNum" />
			<!-- <replacefilter
	                token="@JarFile@"
	                property="JarFile"/>
	                -->
		</replace>
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--   pulizia							   							-->
	<target name="clean">
		<delete dir="bin" />
		<delete dir="junit" />
		<delete dir="dist" />

		<delete file="${nomeprogetto}.jar">
		</delete>
	</target>
	<target depends="clean" name="cleanall" />
	<!--================================================================-->

	<target depends="versionInfo,cleanall,build-subprojects,build-project,build-project-apt,build-project-gwt,build-project-webtest,build-project-gwttest" name="build">
		<antcall target="build-project-jsp">
		</antcall>
		<antcall target="build-project-js">
		</antcall>

	</target>

	<!--================================================================-->
	<!--   depends							   							-->
	<!--	Andrea 17/03/10												-->
	<!--	Ancora non si capisce come funzoina							-->

	<target name="depend">
		<depend srcdir="bin" destdir="${lib.home}" cache="depcache" closure="yes" dump="true" />

	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--   compilazione creazione web service (non fa)					-->
	<target depends="init" name="build-project-apt" if="javasourceapt">
		<taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen">
			<classpath>
				<pathelement location="${lib.home}/activation.jar" />
				<pathelement location="${lib.home}/webservices-api.jar" />
				<pathelement location="${lib.home}/webservices-rt.jar" />
				<pathelement location="${lib.home}/webservices-tools.jar" />
			</classpath>
		</taskdef>
		<!--  
		<javac debug="true" debuglevel="${debuglevel}" destdir="${web.folder}/WEB-INF/classes" source="${source}" target="${target}" >
			<src path="${javasourceapt}" />
			<classpath refid="latest.classpath" />
		</javac>
		-->
		<!-- TODO controllo che esista la servlet nel file web.xml-->
		<xmlproperty file="${web.folder}/WEB-INF/web.xml" />
		<!-- TODO prendo solo le classi che devono essere trasformate in webservice-->
		<foreach list="${seilist}" param="sei" target="wsgen" inheritall="true">

		</foreach>
	</target>
	<target name="wsgen" if="javasourceapt">
		<echo message="sei=${sei} " />
		<wsgen sei="${sei}" destdir="bin">
			<classpath>
				<pathelement location="${lib.home}/webservices-api.jar" />
				<pathelement location="bin" />
			</classpath>
		</wsgen>
	</target>

	<!--================================================================-->

	<!--================================================================-->
	<!--   creazione file hibernate (bnon fa)							-->

	<target name="hibernate">
		<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="Hibernaterev" />

		<hibernatetool destdir="tmp">
			<jdbcconfiguration packagename="package.name" configurationfile="src/hibernate.cfg.xml" revengfile="hibernate.reveng.xml" detectmanytomany="true">

			</jdbcconfiguration>
			<hbm2hbmxml destdir="tmp" />
		</hibernatetool>

		<hibernatetool destdir="tmp">
			<configuration configurationfile="src/hibernate.cfg.xml" />
			<classpath>
				<path location="${javasource}" />
			</classpath>
			<hbm2java jdk5="true" />
			<!--<hbm2ddl/>-->
			<hbm2dao />
			<hbm2doc />
		</hibernatetool>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	update del database (non fa)								-->

	<target name="sqlupdate" if="sqlstring">

		<sql driver="${sql.driver}" url="${sql.url}" userid="${sql.id}" password="${sql.pw}" expandProperties="true">
			<transaction>
		     ${sqlstring} 
		  </transaction>
		</sql>
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--   compilazione						   							-->
	<target name="build-subprojects" />
	<target depends="init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="on" destdir="bin" source="${source}" target="${target}">
			<src path="${javasource}" />
			<classpath>

				<!--
				Andrea 11/01/11
				Controllare nel caso di compikazione delle servlet
				se si scommentano queste righe non cmpila più 
				un progetto jar normale
				
<pathelement location="${web.folder}/WEB-INF/classes" />
				<fileset dir="${web.folder}/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
-->


				<pathelement location="${tomcat.home}/../lib" />
				<fileset dir="${tomcat.home}/../lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${tomcat.home}/../bin">
					<include name="*.jar" />
				</fileset>
				<path refid="latest.classpath" />
			</classpath>
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
			<src path="${javasourcetest}" />
			<classpath refid="latest.classpath" />
		</javac>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!-- 
	
  [java] Google Web Toolkit 2.0.3
 [java] Compiler [-logLevel level] [-workDir dir] [-gen dir] [-style style] [-ea] [-XdisableClassMetadata] [-XdisableCastChecking] [-validateOnly] [-draftCompile] [-compileReport] [-localWorkers count] [-war dir] [-extra dir] module[s] 
 [java] where 
 [java]   -logLevel               The level of logging detail: ERROR, WARN, INFO, TRACE, DEBUG, SPAM, or ALL
 [java]   -workDir                The compiler's working directory for internal use (must be writeable; defaults to a system temp dir)
 [java]   -gen                    Debugging: causes normally-transient generated types to be saved in the specified directory
 [java]   -style                  Script output style: OBF[USCATED], PRETTY, or DETAILED (defaults to OBF)
 [java]   -ea                     Debugging: causes the compiled output to check assert statements
 [java]   -XdisableClassMetadata  EXPERIMENTAL: Disables some java.lang.Class methods (e.g. getName())
 [java]   -XdisableCastChecking   EXPERIMENTAL: Disables run-time checking of cast operations
 [java]   -validateOnly           Validate all source code, but do not compile
 [java]   -draftCompile           Enable faster, but less-optimized, compilations
 [java]   -compileReport          Create a compile report that tells the Story of Your Compile
 [java]   -localWorkers           The number of local workers to use when compiling permutations
 [java]   -war                    The directory into which deployable output files will be written (defaults to 'war')
 [java]   -extra                  The directory into which extra files, not intended for deployment, will be written
 [java] and 
 [java]   module[s]               Specifies the name(s) of the module(s) to compile
-->
	<!--================================================================-->
	<target name="build-project-gwt" depends="init" if="gwtproject">
		<java classname="com.google.gwt.dev.Compiler" fork="true" failonerror="yes">
			<classpath refid="latest.classpath" />
			<classpath refid="lib.path.ref" />
			<jvmarg value="-Xmx256M" />
			<!--<arg line="-logLevel ALL"/>-->
			<arg value="-ea" />
			<arg value="-compileReport" />
			<arg value="${mainclass}" />
			<classpath path="${javasource}" />
		</java>
	</target>
	<!--================================================================-->
	<!--   compilazione webtest				   							-->


	<target depends="init" name="build-project-webtest" if="progettoweb">
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
			<src path="${javasourcewebtest}" />
			<classpath refid="latest.classpath" />
		</javac>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--   compilazione gwttest				   							-->
	<target depends="init" name="build-project-gwttest" if="gwtproject">
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
			<src path="${javasourcegwttest}" />
			<classpath refid="latest.classpath" />
		</javac>
	</target>



	<target name="build-project-js" if="javascriptfiles">
		<jscomp compilationLevel="advanced" warning="quiet" debug="false" output="dist/${web.folder}/js/file.js">

			<externs dir="${lib.home}/js/ext-3.3.1">
				<file name="ext-all-debug.js" />
			</externs>
			<sources dir="${web.folder}/js" files="${javascriptfiles}">
			</sources>

		</jscomp>
	</target>



	<!--================================================================-->

	<target depends="init" name="build-project-jsp" if="javasourcegen">
		<delete dir="${javasourcegen}" />
		<delete dir="lib" />
		<mkdir dir="lib" />
		<mkdir dir="${javasourcegen}" />
		<!--================================================================-->
		<!-- 			Copia di backup del file web.xml					-->
		<!--================================================================

		<copy file="${web.folder}/WEB-INF/web.xml" tofile="${web.folder}/WEB-INF/web.xml.old" overwrite="true" />
		-->
		<!--================================================================-->
		<!-- 			Andrea 25/12/2010 Compila le jsp					-->
		<!--================================================================-->
		<!--compile="on"-->
		<jasper2 validateXml="false" uriroot="dist/${web.folder}" webXmlFragment="dist/${web.folder}/WEB-INF/generated_web.xml" outputDir="${javasourcegen}" addWebXmlMappings="true" package="eu.cartsc.${nomeprogetto}" verbose="99" classpath="${deploy.classpath}">
		</jasper2>
		<!--================================================================-->
		<!-- 			Andrea 25/12/2010 Compila il java					-->
		<!--================================================================-->

		<mkdir dir="dist/${web.folder}/WEB-INF/classes" />
		<mkdir dir="dist/${web.folder}/WEB-INF/lib" />

		<javac destdir="bin" optimize="off" debug="on" srcdir="${javasourcegen}" excludes="**/*.smap" source="${source}" target="${target}">
			<classpath>
				<pathelement location="dist/${web.folder}/WEB-INF/classes" />

				<fileset dir="dist/${web.folder}/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${tomcat.home}/../lib" />
				<fileset dir="${tomcat.home}/../lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${tomcat.home}/../bin">
					<include name="*.jar" />
				</fileset>
				<path refid="latest.classpath" />
			</classpath>
			<include name="**" />
			<exclude name="tags/**" />
		</javac>

	</target>
	<!--================================================================-->


	<target depends="build,depend,testjava,test.gwt" name="test" />

	<!--================================================================-->
	<!--   compilazione esecuzione di test java							-->
	<target depends="build,depend" name="testjava">
		<!--	<echo message="${deploy.classpath}" />-->
		<mkdir dir="${junit.output.dir}" />
		<!--<echoproperties></echoproperties>-->
		<junit fork="yes" printsummary="withOutAndErr" failureproperty="junit.failure" showoutput="true">
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.output.dir}">
				<formatter type="xml" />
				<fileset dir="${javasourcetest}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="bin" />
				<path refid="latest.classpath" />
			</classpath>
		</junit>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--   compilazione esecuzione di test gwt	   							-->
	<target name="test.gwt" depends="test.dev,test.prod" if="gwtproject" />
	<!--================================================================-->



	<!--================================================================-->
	<!--   compilazione esecuzione di test gwt dev						-->

	<target name="test.dev" depends="build-project-gwttest" description="Run development mode tests" if="gwtproject">
		<junit fork="yes" printsummary="yes" haltonfailure="yes">
			<jvmarg line="-Xmx256m" />
			<sysproperty key="gwt.args" value="-standardsMode -logLevel WARN" />
			<sysproperty key="java.awt.headless" value="true" />
			<classpath>
				<pathelement location="${javasourcegwttest}" />
				<pathelement location="bin" />
				<path refid="latest.classpath" />
			</classpath>
			<batchtest fork="yes" todir="${junit.output.dir}">
				<fileset dir="${javasourcegwttest}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
			<formatter type="plain" />
			<formatter type="xml" />
		</junit>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--   compilazione esecuzione di test gwt prod						-->

	<target name="test.prod" if="gwtproject" />


	<!--================================================================-->
	<!--   creazione del report dei test								-->

	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${junit.output.dir}"  
				styledir="junitreport"
		        format="frames"/>
		</junitreport>
		<fail if="junit.failure" message="Unit test(s) failed.  See reports!" />

	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	Creazieon del war 											-->
	<!--																-->
	<!-- se è abilitata la compilazione delle pagine jsp non 			-->
	<!--	include le jsp												-->
	<!--     															-->
	<!--================================================================-->
	<target depends="test,junitreport,javadoc" name="war" if="progettoweb">
		<if>
			<isset property="common.lib" />
			<then>
				<mkdir dir="dist/lib" />
				<copy todir="dist/lib" flatten="true">
					<fileset refid="common.lib.path.ref.fileset" />
				</copy>
				<!--<mkdir dir="${web.folder}.lib.old" />
				<copy todir="${web.folder}.lib.old" flatten="true">
					<fileset dir="${web.folder}/${lib.folder}" />
				</copy>
				<delete dir="${web.folder}/${lib.folder}" />-->
			</then>
			<else>
				<copy todir="dist/${web.folder}/WEB-INF/lib" flatten="true">
					<fileset refid="common.lib.path.ref.fileset" />
				</copy>
			</else>
		</if>
		<mkdir dir="dist/${web.folder}/WEB-INF/lib" />

		<jar destfile="dist/${web.folder}/WEB-INF/lib/${nomeprogetto}.jar" basedir="bin" excludes="**/Test.class" />

		<copy todir="dist/${web.folder}/WEB-INF/lib" flatten="true">
			<fileset refid="lib.path.ref.fileset" />
		</copy>


		<if>
			<isset property="javasourcegen" />
			<then>
				<war destfile="${nomeprogetto}${suffix}.war" basedir="dist/${web.folder}" excludes="**/*.jsp*" />
			</then>
			<else>
				<war destfile="${nomeprogetto}${suffix}.war" basedir="dist/${web.folder}" />
			</else>
		</if>
		<!--<delete>
			<fileset dir="${web.folder}/${lib.folder}" includes="${paramlib}" />
		</delete>-->
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	Creazieon della lib jar										-->

	<target depends="test,junitreport,javadoc" name="jar-lib" if="javaprojectlib">

		<!-- create a property containing all .jar files, prefix lib/, 		-->
		<!--		and seperated with a space 								-->
		<pathconvert property="manifest.classpath" pathsep=" ">
			<mapper>
				<chainedmapper>
					<!-- remove absolute path -->
					<flattenmapper />
					<!-- add lib/ prefix -->
					<!--<globmapper from="*" to="lib/*" /> -->
				</chainedmapper>
			</mapper>
			<path>
				<fileset refid="lib.path.ref.fileset">
				</fileset>
			</path>
		</pathconvert>

		<jar destfile="${lib.home}/${nomeprogetto}${suffix}.jar" basedir="bin" excludes="**/Test.class">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Class-Path" value="./ ${manifest.classpath}" />
			</manifest>

			<!-- <zipfileset dir="${lib.home}" includes="${paramlib}" /> -->

		</jar>
		<copy todir="${web.folder}/${lib.folder}" flatten="true">
			<fileset refid="lib.path.ref.fileset" />
		</copy>

	</target>

	<!--================================================================-->
	<!--	Creazieon del jar eseguibile								-->
	<target depends="test,junitreport,javadoc" name="jar-exe" if="javaprojectexe">

		<copy todir="lib" flatten="true">
			<fileset refid="lib.path.ref.fileset" />
		</copy>
		<!-- create a property containing all .jar files, prefix lib/, and seperated with a space -->
		<pathconvert property="manifest.classpath" pathsep=" ">
			<mapper>
				<chainedmapper>
					<!-- remove absolute path -->
					<flattenmapper />
					<!-- add lib/ prefix -->
					<!--<globmapper from="*" to="lib/*" /> -->
				</chainedmapper>
			</mapper>
			<path>
				<!-- lib.home contains all jar files, in several subdirectories -->
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</pathconvert>
		<echo message="${manifest.classpath}" />
		<fileset id="lib.local" dir="lib" />
		<!--property name="manifest.classpath" refid="lib.local" />-->
		<!--<property name="manifest.classpath" refid="lib.path.ref.fileset" />-->

		<jar destfile="${nomeprogetto}${suffix}.jar" basedir="bin" excludes="**/Test.class">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Rsrc-Main-Class" value="${mainclass}" />
				<attribute name="Rsrc-Class-Path" value="./ ${manifest.classpath}" />
				<attribute name="Class-Path" value=". debug.jar" />
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
			</manifest>
			<zipfileset src="${lib.home}/jar-in-jar-loader.zip" />
			<zipfileset dir="lib" />
			<!--<zipfileset dir="${lib.home}"  includes="${paramlib} ${dipendenze}"/>-->

		</jar>
		<delete>
			<fileset dir="lib" includes="${paramlib}" />
		</delete>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	Creazieon dei jar											-->
	<target depends="jar-lib, jar-exe" name="jar" if="javaproject" />
	<!--================================================================-->



	<!--================================================================-->
	<!--	Creazieon del java doc										-->
	<target name="javadoc">
		<mkdir dir="doc/${nomeprogetto}" />
		<javadoc sourcepath="${javasource}" defaultexcludes="yes" destdir="doc/java" author="true" version="true" use="true" splitindex="true" failonerror="false" linksource="true">
			<classpath refid="latest.classpath" />
		</javadoc>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	inzializzazione per il deploy								-->

	<target name="init.deploy" if="progettoweb">
		<tempfile property="temp.module.folder" prefix="tomcat" destdir="${java.io.tmpdir}" />
		<unwar src="${nomeprogetto}${suffix}.war" dest="${temp.module.folder}">
			<patternset includes="META-INF/context.xml" />
		</unwar>
		<xmlproperty file="${temp.module.folder}/META-INF/context.xml" />
		<delete dir="${temp.module.folder}" />
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--	deploy di test												-->

	<target name="testdeploy" depends="war,jar,init.deploy,-undeploy-ant" if="progettoweb">
		<!--<ant antfile="${basedir}/${deploydir}/deploy.ext.xml" target="testdeploy" inheritall="true" dir="${basedir}"/>-->
		<ant antfile="${deploydir}/deploy.ext.xml" target="testdeploy" inheritall="true" dir="${basedir}" />
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--	esecuzione dei test sul deploy di test						-->

	<target depends="testdeploy" name="testweb" if="progettoweb">
		<echo message="inizio il webtest" />
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr" failureproperty="junit.failure" showoutput="true">
			<formatter type="xml" />

			<batchtest fork="yes" todir="${junit.output.dir}">
				<formatter type="xml" />
				<fileset dir="${javasourcewebtest}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="bin" />
				<path refid="latest.classpath" />
			</classpath>
		</junit>
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--	report del test sul deploy di test							-->
	<target name="juniwebtreport" if="progettoweb">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${junit.output.dir}" format="frames"  />
		</junitreport>
		<fail if="junit.failure" message="Unit test(s) failed.  See reports!" />

	</target>
	<!--================================================================-->



	<target name="deploy" depends="testweb,juniwebtreport,sqlupdate,deploy.jar">

		<antcall target="deploy.web">
		</antcall>
		<antcall target="addnews">
		</antcall>
	</target>

	<!--================================================================-->
	<!--	deploy web													-->

	<target name="deploy.web" if="progettoweb">
		<propertycopy name="suffix" from="suffix.${deploy}" silent="true" />
		<propertycopy name="paramlib" from="paramlib.${deploy}" silent="true" />
		<property name="ref" value="../../${dep}/" />
		<!--======================================
			<echo message="la ref è :${ref}" />
			<echo message="file ${ref}deploy.properties" />
			<echoproperties></echoproperties>
		==========================================-->

		<propertycopy name="tomcat.url" from="tomcat.url.${deploy}" override="true" silent="true" />
		<propertycopy name="tomcat.username" from="tomcat.username.${deploy}" silent="true" />
		<propertycopy name="tomcat.password" from="tomcat.password.${deploy}" silent="true" />

		<ant antfile="${deploydir}/deploy.ext.xml" target="install" inheritall="true" dir="${basedir}">
		</ant>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	deploy jar													-->
	<target name="deploy.jar" if="ftp.url">
		<ant antfile="${deploydir}/deploy.ext.xml" target="install.jar" inheritall="true" dir="${basedir}">
		</ant>
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--	undeploy web												-->

	<target name="-undeploy-ant" depends="init.deploy" if="progettoweb">
		<echo message="Undeploying ${Context(path)}${suffix}" />
		<!--<undeploy  url="${tomcat.url}/manager" failonerror="false" path="${Context(path)}${suffix}"  username="${tomcat.username}" password="${tomcat.password}" > </undeploy>
-->
	</target>
	<!--================================================================-->




	<!--================================================================-->
	<!--	merge delle pagine jsp										-->

	<target name="mergelistjsp" if="paramlib">
		
		<antcall target="mergewebxml">
		</antcall>
		<antcall target="mergecontextxml">
		</antcall>
		<foreach list="${paramlib}" param="parlib" target="mergejsp" inheritall="true" delimiter=" ">
		</foreach>
	</target>

	<target name="mergejsp">
		<echo message="la paramlib è =${parlib}">
		</echo>
		<copy todir="dist/${web.folder}" overwrite="true" verbose="true">
			<zipfileset src="${lib.home}/${parlib}">
				<include name="**/*.jsp" />
				<include name="**/*.jspf" />
				<include name="**/*.gif" />
				<include name="**/*.jpg" />
				<include name="**/*.bat" />
				<include name="**/*.xml" />
				<include name="**/*.dll" />
				<include name="**/*.exe" />
				<include name="**/*.txt" />
				<include name="**/*.css" />
				<include name="**/*context.xml" />
			</zipfileset>
		</copy>
	</target>
	<!--================================================================-->

	<!--================================================================-->
	<!--	merge del web.xml											-->

	<target name="mergewebxml">
		<loadresource property="web.xml.fragment" failonerror="false">
			<javaresource name="WEB-INF/web.xml.fragment">
				<!--
				Andrea 11/09/12
				ho cmabiato da 
				lib.path.ref
				a 
				lib.path.ref.param 
				perchè così prende solo i dati dalla parmalib
				-->
				<classpath refid="lib.path.ref.param" />
			</javaresource>
		</loadresource>
		<!-- 
		<echo message="web.xml.fragment = ${web.xml.fragment}">
		</echo>
		-->
		<copy file="${web.folder}/WEB-INF/web.xml" toFile="dist/${web.folder}/WEB-INF/web.xml" overwrite="true" failonerror="false">
			<filterset>
				<filter token="security" value=" security --&gt; ${web.xml.fragment} &lt;!-- " />
			</filterset>
		</copy>
	</target>
	<!--================================================================-->


	<!--================================================================-->
	<!--	merge del context.xml											-->
	<target name="mergecontextxml">
		<loadresource property="context.xml.fragment" failonerror="false">
			<javaresource name="META-INF/context.xml.fragment">
				<!--
								Andrea 11/09/12
								ho cmabiato da 
								lib.path.ref
								a 
								lib.path.ref.param 
								perchè così prende solo i dati dalla parmalib
								-->
				<classpath refid="lib.path.ref.param" />
			</javaresource>
		</loadresource>

		<echo message="context.xml.fragment = ${context.xml.fragment}">
		</echo>

		<copy file="${web.folder}/META-INF/context.xml" toFile="dist/${web.folder}/META-INF/context.xml" overwrite="true" failonerror="false">
			<filterset>
				<filter token="Realm" value=" Realm --&gt; ${context.xml.fragment} &lt;!-- " />
			</filterset>
		</copy>
	</target>

	<!--================================================================-->
	<!--================================================================-->
	<!--	update del database (non fa)								-->

	<target name="addnews" if="project">

		<tstamp>
			<format property="deploy.time" pattern="yyyy-MM-dd HH:mm:ss.0" />
			<format property="deploy.data" pattern="EEEE dd MMMM yyyy HH:mm" />

		</tstamp>
		<property name="deploy.desc" value="Aggiornamento eseguito con successo" />
		<sql driver="${redmine.driver}" url="${redmine.url}" userid="${redmine.id}" password="${redmine.pw}" expandProperties="true">
			<transaction>
				<![CDATA[

				insert into `news` (`id`, `project_id`, `title`, `summary`, `description`, `author_id`, `created_on`, `comments_count`) 
				values(null, ${project}, 'Deploy', 'aggiornamento del ${deploy.data} ', '${deploy.desc}', 10, '${deploy.time}', 0)
				
				]]>
			</transaction>
		</sql>
	</target>
	<!--================================================================-->


</project>

